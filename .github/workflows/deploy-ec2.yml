name: Deploy with Docker

on:
  pull_request:
    branches:
      - develop
      - main

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          cd lms
          ./gradlew clean build -x test
          docker build \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg DB_PORT=${{ secrets.DB_PORT }} \
            --build-arg DB_NAME=${{ secrets.DB_NAME }} \
            --build-arg DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/goget-customer:${{ github.sha }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/goget-customer:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/goget-customer:latest

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/goget-customer:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/goget-customer:latest

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build-docker-image
    environment: prod

    steps:
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/goget-customer:latest

            docker stop lms-container || true
            docker rm lms-container || true

            docker run -d --name lms-container -p 8080:8080 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/goget-customer:latest
